#ifndef __BLBX_H
#define __BLBX_H


void init_loging(void);
int write_log(char *str);
int read_log(char *str,int len);



typedef struct _bb_flags{
    u16 len:12;
    u16 flags:4;
}bb_flags_t;

typedef struct _fl_ptrs {
    u32 bb_read;//текущее место чтения
    u32 bb_cur_read0;//метка чтения 0
    u32 bb_cur_read1;//метка чтения 0
    u32 bb_write;//текущее место записи
    u32 bb_start_ptr;
    u32 bb_cur_ptr;
    u32 fl_esize;//размер сектора флеши
    u16 us_size;
    u16 us_cur_len;
    u32 fl_size;
}bb_params_t;

// инициализация черного ящика
// результат
// -2 - не отформатирована
// -1 - флеш не найдена
//  0 - флеш найдена и готова
//  1 - флеш найдена, нужно вызвать ф-ю find_bb_ptrs
i8 init_bb (void);

// инициализация указателей в ЧЯ
// buf и len задают адрес и длину временного буфера
// результат
// 0 - указатели готовы
// 1 - нужно вызвать ещё раз
i8 find_bb_ptrs (u32 *buf, u8 len);

// запись в ЧЯ
i8 write_bb (u8 write_mask, char *data, u16 len);

// чтение из ЧЯ.
// read_mask задает маску записи, которая будет прочитана, 4 бита 0F
// data - куда читать
// len - передает максимальный размер буфера, возвращает количество прочитанных байт
// результат
// -1 - ошибка
//  0 - успешно
//  1 - запись с такой маской не найдена
i8 read_bb (u8 read_mask, u8 *data, u16 *len);

// чтение из ЧЯ и сохранением указателя на найденную запись
// num  задает номер указателя. 0 - начала архива, 1 - указатель №1,1 - указатель №2 
// read_mask задает маску записи, которая будет прочитана, 4 бита
// data - куда читать
// len - передает максимальный размер буфера, возвращает количество прочитанных байт
// результат
// -1 - ошибка
//  0 - успешно
//  1 - запись с такой маской не найдена
i8 read_bb_first (u8 num, u8 read_mask, u8 *data, u16 *len);

// чтение из ЧЯ по ранее сохраненному указателю
// num  задает номер ранее сохраненого указателя. 0 - читать с начала архива, 1 - читать с указателя №1,1 - читать с указателя №2 
// read_mask задает маску записи, которая будет прочитана, 4 бита
// data - куда читать
// len - передает максимальный размер буфера, возвращает количество прочитанных байт
// результат
// -1 - ошибка
//  0 - успешно
//  1 - запись с такой маской не найдена
i8 read_bb_next (u8 num, u8 read_mask, u8 *data, u16 *len);

// удаление из ЧЯ. erase_mask маска стирания, 4 бита. при стирании у записи сбрабываются биты из маски.
// запись удаляется из ЧЯ если все биты маски 0
i8 erase_bb (u8 erase_mask);

// стирание всех записей в ЧЯ
i8 eraseall_bb (void);

// переинициализация ЧЯ
i8 format_bb (void);
//

i8 write_log_bb(char *text,u16 type);
//i8 write_log_bb(char *buffer);
i8 read_log_bb(char *msg, u16 *len);
u8 init_flash(void);

void xEraseBB_Task(void *pvParameters);

#endif
